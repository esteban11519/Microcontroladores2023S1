

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Dec 14 15:12:32 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    32  0000                     
    33                           ; Version 2.32
    34                           ; Generated 02/02/2021 GMT
    35                           ; 
    36                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     
    69                           	psect	idataCOMRAM
    70  000E6C                     __pidataCOMRAM:
    71                           	callstack 0
    72                           
    73                           ;initializer for _interfaz
    74  000E6C  08                 	db	8
    75  0000                     _CCPR1	set	4030
    76  0000                     _TMR1	set	4046
    77  0000                     _ADRES	set	4035
    78  0000                     _CCP1CON	set	4029
    79  0000                     _TRISD	set	3989
    80  0000                     _ADCON2	set	4032
    81  0000                     _ADCON1	set	4033
    82  0000                     _ADCON0	set	4034
    83  0000                     _LATD	set	3980
    84  0000                     _TMR1IF	set	31984
    85  0000                     _GO	set	32273
    86  0000                     _LATD1	set	31841
    87  0000                     _LATD0	set	31840
    88                           
    89                           	psect	smallconst
    90  000800                     __psmallconst:
    91                           	callstack 0
    92  000800  00                 	db	0
    93  000801                     STR_2:
    94  000801  50                 	db	80	;'P'
    95  000802  72                 	db	114	;'r'
    96  000803  75                 	db	117	;'u'
    97  000804  65                 	db	101	;'e'
    98  000805  62                 	db	98	;'b'
    99  000806  61                 	db	97	;'a'
   100  000807  20                 	db	32
   101  000808  41                 	db	65	;'A'
   102  000809  44                 	db	68	;'D'
   103  00080A  43                 	db	67	;'C'
   104  00080B  00                 	db	0
   105  00080C                     STR_1:
   106  00080C  48                 	db	72	;'H'
   107  00080D  6F                 	db	111	;'o'
   108  00080E  6C                 	db	108	;'l'
   109  00080F  61                 	db	97	;'a'
   110  000810  20                 	db	32
   111  000811  6D                 	db	109	;'m'
   112  000812  75                 	db	117	;'u'
   113  000813  6E                 	db	110	;'n'
   114  000814  64                 	db	100	;'d'
   115  000815  6F                 	db	111	;'o'
   116  000816  00                 	db	0
   117  000817  00                 	db	0	; dummy byte at the end
   118  0000                     
   119                           ; #config settings
   120                           
   121                           	psect	cinit
   122  000DBE                     __pcinit:
   123                           	callstack 0
   124  000DBE                     start_initialization:
   125                           	callstack 0
   126  000DBE                     __initialization:
   127                           	callstack 0
   128                           
   129                           ; Initialize objects allocated to COMRAM (1 bytes)
   130                           ; load TBLPTR registers with __pidataCOMRAM
   131  000DBE  0E6C               	movlw	low __pidataCOMRAM
   132  000DC0  6EF6               	movwf	tblptrl,c
   133  000DC2  0E0E               	movlw	high __pidataCOMRAM
   134  000DC4  6EF7               	movwf	tblptrh,c
   135  000DC6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   136  000DC8  6EF8               	movwf	tblptru,c
   137  000DCA  0009               	tblrd		*+	;fetch initializer
   138  000DCC  CFF5 F01E          	movff	tablat,__pdataCOMRAM
   139                           
   140                           ; Clear objects allocated to COMRAM (2 bytes)
   141  000DD0  6A1D               	clrf	(__pbssCOMRAM+1)& (0+255),c
   142  000DD2  6A1C               	clrf	__pbssCOMRAM& (0+255),c
   143  000DD4                     end_of_initialization:
   144                           	callstack 0
   145  000DD4                     __end_of__initialization:
   146                           	callstack 0
   147  000DD4  901F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   148  000DD6  921F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   149  000DD8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   150  000DDA  6EF8               	movwf	tblptru,c
   151  000DDC  0100               	movlb	0
   152  000DDE  EF76  F005         	goto	_main	;jump to C main() function
   153                           
   154                           	psect	bssCOMRAM
   155  00001C                     __pbssCOMRAM:
   156                           	callstack 0
   157  00001C                     _aux:
   158                           	callstack 0
   159  00001C                     	ds	2
   160                           
   161                           	psect	dataCOMRAM
   162  00001E                     __pdataCOMRAM:
   163                           	callstack 0
   164  00001E                     _interfaz:
   165                           	callstack 0
   166  00001E                     	ds	1
   167                           
   168                           	psect	cstackCOMRAM
   169  000001                     __pcstackCOMRAM:
   170                           	callstack 0
   171  000001                     ??_RetardoLCD:
   172  000001                     ?_Conversion:
   173                           	callstack 0
   174  000001                     ?___lwmod:
   175                           	callstack 0
   176  000001                     ConfiguraLCD@a:
   177                           	callstack 0
   178  000001                     ___lwmod@dividend:
   179                           	callstack 0
   180                           
   181                           ; 2 bytes @ 0x0
   182  000001                     	ds	1
   183  000002                     RetardoLCD@a:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x1
   187  000002                     	ds	1
   188  000003                     ??_Conversion:
   189  000003                     ??_EnviaDato:
   190  000003                     ___lwmod@divisor:
   191                           	callstack 0
   192                           
   193                           ; 2 bytes @ 0x2
   194  000003                     	ds	1
   195  000004                     EnviaDato@a:
   196                           	callstack 0
   197  000004                     Conversion@canal:
   198                           	callstack 0
   199                           
   200                           ; 1 bytes @ 0x3
   201  000004                     	ds	1
   202  000005                     EscribeLCD_c@a:
   203                           	callstack 0
   204  000005                     DireccionaLCD@a:
   205                           	callstack 0
   206  000005                     ___lwmod@counter:
   207                           	callstack 0
   208                           
   209                           ; 1 bytes @ 0x4
   210  000005                     	ds	1
   211  000006                     ?___lwdiv:
   212                           	callstack 0
   213  000006                     MensajeLCD_Var@a:
   214                           	callstack 0
   215  000006                     ___lwdiv@dividend:
   216                           	callstack 0
   217                           
   218                           ; 2 bytes @ 0x5
   219  000006                     	ds	1
   220  000007                     
   221                           ; 1 bytes @ 0x6
   222  000007                     	ds	1
   223  000008                     ___lwdiv@divisor:
   224                           	callstack 0
   225                           
   226                           ; 2 bytes @ 0x7
   227  000008                     	ds	2
   228  00000A                     ___lwdiv@quotient:
   229                           	callstack 0
   230                           
   231                           ; 2 bytes @ 0x9
   232  00000A                     	ds	2
   233  00000C                     ___lwdiv@counter:
   234                           	callstack 0
   235                           
   236                           ; 1 bytes @ 0xB
   237  00000C                     	ds	1
   238  00000D                     EscribeLCD_n16@a:
   239                           	callstack 0
   240                           
   241                           ; 2 bytes @ 0xC
   242  00000D                     	ds	2
   243  00000F                     EscribeLCD_n16@b:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0xE
   247  00000F                     	ds	1
   248  000010                     EscribeLCD_n16@millar:
   249                           	callstack 0
   250                           
   251                           ; 2 bytes @ 0xF
   252  000010                     	ds	2
   253  000012                     EscribeLCD_n16@centena:
   254                           	callstack 0
   255                           
   256                           ; 2 bytes @ 0x11
   257  000012                     	ds	2
   258  000014                     EscribeLCD_n16@decena:
   259                           	callstack 0
   260                           
   261                           ; 1 bytes @ 0x13
   262  000014                     	ds	1
   263  000015                     EscribeLCD_n16@unidad:
   264                           	callstack 0
   265                           
   266                           ; 1 bytes @ 0x14
   267  000015                     	ds	1
   268  000016                     ??_main:
   269                           
   270                           ; 1 bytes @ 0x15
   271  000016                     	ds	2
   272  000018                     main@resultado1:
   273                           	callstack 0
   274                           
   275                           ; 2 bytes @ 0x17
   276  000018                     	ds	2
   277  00001A                     main@resultado2:
   278                           	callstack 0
   279                           
   280                           ; 2 bytes @ 0x19
   281  00001A                     	ds	2
   282                           
   283 ;;
   284 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   285 ;;
   286 ;; *************** function _main *****************
   287 ;; Defined at:
   288 ;;		line 11 in file "PruebaADC.c"
   289 ;; Parameters:    Size  Location     Type
   290 ;;		None
   291 ;; Auto vars:     Size  Location     Type
   292 ;;  resultado2      2   25[COMRAM] unsigned int 
   293 ;;  resultado1      2   23[COMRAM] unsigned int 
   294 ;; Return value:  Size  Location     Type
   295 ;;                  1    wreg      void 
   296 ;; Registers used:
   297 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   298 ;; Tracked objects:
   299 ;;		On entry : 0/0
   300 ;;		On exit  : 0/0
   301 ;;		Unchanged: 0/0
   302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   303 ;;      Params:         0       0       0       0       0       0       0       0       0
   304 ;;      Locals:         4       0       0       0       0       0       0       0       0
   305 ;;      Temps:          2       0       0       0       0       0       0       0       0
   306 ;;      Totals:         6       0       0       0       0       0       0       0       0
   307 ;;Total ram usage:        6 bytes
   308 ;; Hardware stack levels required when called: 5
   309 ;; This function calls:
   310 ;;		_BorraLCD
   311 ;;		_ConfiguraLCD
   312 ;;		_Conversion
   313 ;;		_DireccionaLCD
   314 ;;		_EscribeLCD_n16
   315 ;;		_InicializaLCD
   316 ;;		_MensajeLCD_Var
   317 ;; This function is called by:
   318 ;;		Startup code after reset
   319 ;; This function uses a non-reentrant model
   320 ;;
   321                           
   322                           	psect	text0
   323  000AEC                     __ptext0:
   324                           	callstack 0
   325  000AEC                     _main:
   326                           	callstack 26
   327                           
   328                           ;PruebaADC.c: 12: unsigned int resultado1,resultado2;;PruebaADC.c: 13: ADCON0=0b00000001
      +                          ;
   329                           
   330                           ;incstack = 0
   331  000AEC  0E01               	movlw	1
   332  000AEE  6EC2               	movwf	194,c	;volatile
   333                           
   334                           ;PruebaADC.c: 14: ADCON1=13;
   335  000AF0  0E0D               	movlw	13
   336  000AF2  6EC1               	movwf	193,c	;volatile
   337                           
   338                           ;PruebaADC.c: 15: ADCON2=0b10001000;
   339  000AF4  0E88               	movlw	136
   340  000AF6  6EC0               	movwf	192,c	;volatile
   341                           
   342                           ;PruebaADC.c: 17: TRISD=0;
   343  000AF8  0E00               	movlw	0
   344  000AFA  6E95               	movwf	149,c	;volatile
   345                           
   346                           ;PruebaADC.c: 18: LATD=0;
   347  000AFC  0E00               	movlw	0
   348  000AFE  6E8C               	movwf	140,c	;volatile
   349                           
   350                           ;PruebaADC.c: 19: _delay((unsigned long)((1000)*(1000000/4000.0)));
   351  000B00  0E02               	movlw	2
   352  000B02  6E17               	movwf	(??_main+1)^0,c
   353  000B04  0E45               	movlw	69
   354  000B06  6E16               	movwf	??_main^0,c
   355  000B08  0EAA               	movlw	170
   356  000B0A                     u267:
   357  000B0A  2EE8               	decfsz	wreg,f,c
   358  000B0C  D7FE               	bra	u267
   359  000B0E  2E16               	decfsz	??_main^0,f,c
   360  000B10  D7FC               	bra	u267
   361  000B12  2E17               	decfsz	(??_main+1)^0,f,c
   362  000B14  D7FA               	bra	u267
   363                           
   364                           ;PruebaADC.c: 20: ConfiguraLCD(4);
   365  000B16  0E04               	movlw	4
   366  000B18  EC03  F007         	call	_ConfiguraLCD
   367                           
   368                           ;PruebaADC.c: 21: InicializaLCD();
   369  000B1C  ECD2  F005         	call	_InicializaLCD	;wreg free
   370                           
   371                           ;PruebaADC.c: 22: MensajeLCD_Var("Hola mundo");
   372  000B20  0E0C               	movlw	low STR_1
   373  000B22  6E06               	movwf	MensajeLCD_Var@a^0,c
   374  000B24  ECB8  F006         	call	_MensajeLCD_Var	;wreg free
   375                           
   376                           ;PruebaADC.c: 23: DireccionaLCD(0xC0);
   377  000B28  0EC0               	movlw	192
   378  000B2A  EC1A  F007         	call	_DireccionaLCD
   379                           
   380                           ;PruebaADC.c: 24: MensajeLCD_Var("Prueba ADC");
   381  000B2E  0E01               	movlw	low STR_2
   382  000B30  6E06               	movwf	MensajeLCD_Var@a^0,c
   383  000B32  ECB8  F006         	call	_MensajeLCD_Var	;wreg free
   384                           
   385                           ;PruebaADC.c: 25: _delay((unsigned long)((2000)*(1000000/4000.0)));
   386  000B36  0E03               	movlw	3
   387  000B38  6E17               	movwf	(??_main+1)^0,c
   388  000B3A  0E8A               	movlw	138
   389  000B3C  6E16               	movwf	??_main^0,c
   390  000B3E  0E56               	movlw	86
   391  000B40                     u277:
   392  000B40  2EE8               	decfsz	wreg,f,c
   393  000B42  D7FE               	bra	u277
   394  000B44  2E16               	decfsz	??_main^0,f,c
   395  000B46  D7FC               	bra	u277
   396  000B48  2E17               	decfsz	(??_main+1)^0,f,c
   397  000B4A  D7FA               	bra	u277
   398  000B4C                     l1210:
   399                           
   400                           ;PruebaADC.c: 34: resultado1=Conversion(0);
   401  000B4C  0E00               	movlw	0
   402  000B4E  ECCC  F006         	call	_Conversion
   403  000B52  C001  F018         	movff	?_Conversion,main@resultado1
   404  000B56  C002  F019         	movff	?_Conversion+1,main@resultado1+1
   405                           
   406                           ;PruebaADC.c: 35: resultado2=Conversion(1);
   407  000B5A  0E01               	movlw	1
   408  000B5C  ECCC  F006         	call	_Conversion
   409  000B60  C001  F01A         	movff	?_Conversion,main@resultado2
   410  000B64  C002  F01B         	movff	?_Conversion+1,main@resultado2+1
   411                           
   412                           ;PruebaADC.c: 37: BorraLCD();
   413  000B68  EC25  F007         	call	_BorraLCD	;wreg free
   414                           
   415                           ;PruebaADC.c: 38: EscribeLCD_n16(resultado1,4);
   416  000B6C  C018  F00D         	movff	main@resultado1,EscribeLCD_n16@a
   417  000B70  C019  F00E         	movff	main@resultado1+1,EscribeLCD_n16@a+1
   418  000B74  0E04               	movlw	4
   419  000B76  6E0F               	movwf	EscribeLCD_n16@b^0,c
   420  000B78  EC0C  F004         	call	_EscribeLCD_n16	;wreg free
   421                           
   422                           ;PruebaADC.c: 39: DireccionaLCD(0xC0);
   423  000B7C  0EC0               	movlw	192
   424  000B7E  EC1A  F007         	call	_DireccionaLCD
   425                           
   426                           ;PruebaADC.c: 40: EscribeLCD_n16(resultado2,4);
   427  000B82  C01A  F00D         	movff	main@resultado2,EscribeLCD_n16@a
   428  000B86  C01B  F00E         	movff	main@resultado2+1,EscribeLCD_n16@a+1
   429  000B8A  0E04               	movlw	4
   430  000B8C  6E0F               	movwf	EscribeLCD_n16@b^0,c
   431  000B8E  EC0C  F004         	call	_EscribeLCD_n16	;wreg free
   432                           
   433                           ;PruebaADC.c: 41: _delay((unsigned long)((500)*(1000000/4000.0)));
   434  000B92  0EA3               	movlw	163
   435  000B94  6E16               	movwf	??_main^0,c
   436  000B96  0E55               	movlw	85
   437  000B98                     u287:
   438  000B98  2EE8               	decfsz	wreg,f,c
   439  000B9A  D7FE               	bra	u287
   440  000B9C  2E16               	decfsz	??_main^0,f,c
   441  000B9E  D7FC               	bra	u287
   442  000BA0  F000               	nop	
   443  000BA2  D7D4               	goto	l1210
   444  000BA4                     __end_of_main:
   445                           	callstack 0
   446                           
   447 ;; *************** function _MensajeLCD_Var *****************
   448 ;; Defined at:
   449 ;;		line 232 in file "LibLCDXC8.h"
   450 ;; Parameters:    Size  Location     Type
   451 ;;  a               1    5[COMRAM] PTR unsigned char 
   452 ;;		 -> STR_2(11), STR_1(11), 
   453 ;; Auto vars:     Size  Location     Type
   454 ;;		None
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   464 ;;      Params:         1       0       0       0       0       0       0       0       0
   465 ;;      Locals:         0       0       0       0       0       0       0       0       0
   466 ;;      Temps:          0       0       0       0       0       0       0       0       0
   467 ;;      Totals:         1       0       0       0       0       0       0       0       0
   468 ;;Total ram usage:        1 bytes
   469 ;; Hardware stack levels used: 1
   470 ;; Hardware stack levels required when called: 4
   471 ;; This function calls:
   472 ;;		_EscribeLCD_c
   473 ;; This function is called by:
   474 ;;		_main
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478                           	psect	text1
   479  000D70                     __ptext1:
   480                           	callstack 0
   481  000D70                     _MensajeLCD_Var:
   482                           	callstack 26
   483                           
   484                           ;LibLCDXC8.h: 236: while(*a != '\0'){
   485                           
   486                           ;incstack = 0
   487  000D70  D009               	goto	l1188
   488  000D72                     l1184:
   489                           
   490                           ;LibLCDXC8.h: 237: EscribeLCD_c(*a);
   491  000D72  C006  FFF6         	movff	MensajeLCD_Var@a,tblptrl
   492  000D76                     	if	1	;There is more than 1 active tblptr byte
   493  000D76  0E08               	movlw	high __smallconst
   494  000D78  6EF7               	movwf	tblptrh,c
   495  000D7A                     	endif
   496  000D7A                     	if	0	;tblptru may be non-zero
   497  000D7A                     	endif
   498  000D7A                     	if	0	;tblptru may be non-zero
   499  000D7A                     	endif
   500  000D7A  0008               	tblrd		*
   501  000D7C  50F5               	movf	tablat,w,c
   502  000D7E  EC0F  F007         	call	_EscribeLCD_c
   503                           
   504                           ;LibLCDXC8.h: 238: a++;
   505  000D82  2A06               	incf	MensajeLCD_Var@a^0,f,c
   506  000D84                     l1188:
   507  000D84  C006  FFF6         	movff	MensajeLCD_Var@a,tblptrl
   508  000D88                     	if	1	;There is more than 1 active tblptr byte
   509  000D88  0E08               	movlw	high __smallconst
   510  000D8A  6EF7               	movwf	tblptrh,c
   511  000D8C                     	endif
   512  000D8C                     	if	0	;tblptru may be non-zero
   513  000D8C                     	endif
   514  000D8C                     	if	0	;tblptru may be non-zero
   515  000D8C                     	endif
   516  000D8C  0008               	tblrd		*
   517  000D8E  50F5               	movf	tablat,w,c
   518  000D90  0900               	iorlw	0
   519  000D92  B4D8               	btfsc	status,2,c
   520  000D94  0012               	return	
   521  000D96  D7ED               	goto	l1184
   522  000D98                     __end_of_MensajeLCD_Var:
   523                           	callstack 0
   524                           
   525 ;; *************** function _InicializaLCD *****************
   526 ;; Defined at:
   527 ;;		line 71 in file "LibLCDXC8.h"
   528 ;; Parameters:    Size  Location     Type
   529 ;;		None
   530 ;; Auto vars:     Size  Location     Type
   531 ;;		None
   532 ;; Return value:  Size  Location     Type
   533 ;;                  1    wreg      void 
   534 ;; Registers used:
   535 ;;		wreg, status,2, status,0, cstack
   536 ;; Tracked objects:
   537 ;;		On entry : 0/0
   538 ;;		On exit  : 0/0
   539 ;;		Unchanged: 0/0
   540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   541 ;;      Params:         0       0       0       0       0       0       0       0       0
   542 ;;      Locals:         0       0       0       0       0       0       0       0       0
   543 ;;      Temps:          0       0       0       0       0       0       0       0       0
   544 ;;      Totals:         0       0       0       0       0       0       0       0       0
   545 ;;Total ram usage:        0 bytes
   546 ;; Hardware stack levels used: 1
   547 ;; Hardware stack levels required when called: 4
   548 ;; This function calls:
   549 ;;		_BorraLCD
   550 ;;		_EnviaDato
   551 ;;		_HabilitaLCD
   552 ;;		_RetardoLCD
   553 ;; This function is called by:
   554 ;;		_main
   555 ;; This function uses a non-reentrant model
   556 ;;
   557                           
   558                           	psect	text2
   559  000BA4                     __ptext2:
   560                           	callstack 0
   561  000BA4                     _InicializaLCD:
   562                           	callstack 26
   563                           
   564                           ;LibLCDXC8.h: 73: LATD0=0;
   565                           
   566                           ;incstack = 0
   567  000BA4  908C               	bcf	3980,0,c	;volatile
   568                           
   569                           ;LibLCDXC8.h: 74: if(interfaz==4)
   570  000BA6  0E04               	movlw	4
   571  000BA8  181E               	xorwf	_interfaz^0,w,c
   572  000BAA  A4D8               	btfss	status,2,c
   573  000BAC  D004               	goto	l1004
   574                           
   575                           ;LibLCDXC8.h: 75: LATD=(LATD & 0b00001111) | 0x30;
   576  000BAE  508C               	movf	140,w,c	;volatile
   577  000BB0  0B0F               	andlw	15
   578  000BB2  0930               	iorlw	48
   579  000BB4  D001               	goto	L1
   580  000BB6                     l1004:
   581                           
   582                           ;LibLCDXC8.h: 76: else;LibLCDXC8.h: 77: LATD=0x3F;
   583  000BB6  0E3F               	movlw	63
   584  000BB8                     L1:
   585  000BB8  6E8C               	movwf	140,c	;volatile
   586                           
   587                           ;LibLCDXC8.h: 78: HabilitaLCD();
   588  000BBA  EC2F  F007         	call	_HabilitaLCD	;wreg free
   589                           
   590                           ;LibLCDXC8.h: 79: RetardoLCD(1);
   591  000BBE  0E01               	movlw	1
   592  000BC0  EC20  F006         	call	_RetardoLCD
   593                           
   594                           ;LibLCDXC8.h: 80: if(interfaz==4)
   595  000BC4  0E04               	movlw	4
   596  000BC6  181E               	xorwf	_interfaz^0,w,c
   597  000BC8  A4D8               	btfss	status,2,c
   598  000BCA  D004               	goto	l1014
   599                           
   600                           ;LibLCDXC8.h: 81: LATD=(LATD & 0b00001111) | 0x30;
   601  000BCC  508C               	movf	140,w,c	;volatile
   602  000BCE  0B0F               	andlw	15
   603  000BD0  0930               	iorlw	48
   604  000BD2  D001               	goto	L2
   605  000BD4                     l1014:
   606                           
   607                           ;LibLCDXC8.h: 82: else;LibLCDXC8.h: 83: LATD=0x3F;
   608  000BD4  0E3F               	movlw	63
   609  000BD6                     L2:
   610  000BD6  6E8C               	movwf	140,c	;volatile
   611                           
   612                           ;LibLCDXC8.h: 84: HabilitaLCD();
   613  000BD8  EC2F  F007         	call	_HabilitaLCD	;wreg free
   614                           
   615                           ;LibLCDXC8.h: 85: RetardoLCD(3);
   616  000BDC  0E03               	movlw	3
   617  000BDE  EC20  F006         	call	_RetardoLCD
   618                           
   619                           ;LibLCDXC8.h: 86: if(interfaz==4)
   620  000BE2  0E04               	movlw	4
   621  000BE4  181E               	xorwf	_interfaz^0,w,c
   622  000BE6  A4D8               	btfss	status,2,c
   623  000BE8  D004               	goto	l1024
   624                           
   625                           ;LibLCDXC8.h: 87: LATD=(LATD & 0b00001111) | 0x30;
   626  000BEA  508C               	movf	140,w,c	;volatile
   627  000BEC  0B0F               	andlw	15
   628  000BEE  0930               	iorlw	48
   629  000BF0  D001               	goto	L3
   630  000BF2                     l1024:
   631                           
   632                           ;LibLCDXC8.h: 88: else;LibLCDXC8.h: 89: LATD=0x3F;
   633  000BF2  0E3F               	movlw	63
   634  000BF4                     L3:
   635  000BF4  6E8C               	movwf	140,c	;volatile
   636                           
   637                           ;LibLCDXC8.h: 90: HabilitaLCD();
   638  000BF6  EC2F  F007         	call	_HabilitaLCD	;wreg free
   639                           
   640                           ;LibLCDXC8.h: 91: RetardoLCD(4);
   641  000BFA  0E04               	movlw	4
   642  000BFC  EC20  F006         	call	_RetardoLCD
   643                           
   644                           ;LibLCDXC8.h: 92: if(interfaz==4){
   645  000C00  0E04               	movlw	4
   646  000C02  181E               	xorwf	_interfaz^0,w,c
   647  000C04  A4D8               	btfss	status,2,c
   648  000C06  D011               	goto	l1044
   649                           
   650                           ;LibLCDXC8.h: 93: LATD=(LATD & 0b00001111) | 0x20;
   651  000C08  508C               	movf	140,w,c	;volatile
   652  000C0A  0B0F               	andlw	15
   653  000C0C  0920               	iorlw	32
   654  000C0E  6E8C               	movwf	140,c	;volatile
   655                           
   656                           ;LibLCDXC8.h: 94: HabilitaLCD();
   657  000C10  EC2F  F007         	call	_HabilitaLCD	;wreg free
   658                           
   659                           ;LibLCDXC8.h: 95: RetardoLCD(4);
   660  000C14  0E04               	movlw	4
   661  000C16  EC20  F006         	call	_RetardoLCD
   662                           
   663                           ;LibLCDXC8.h: 96: EnviaDato(0x2F);
   664  000C1A  0E2F               	movlw	47
   665  000C1C  EC74  F006         	call	_EnviaDato
   666                           
   667                           ;LibLCDXC8.h: 97: HabilitaLCD();
   668  000C20  EC2F  F007         	call	_HabilitaLCD	;wreg free
   669                           
   670                           ;LibLCDXC8.h: 98: RetardoLCD(4);
   671  000C24  0E04               	movlw	4
   672  000C26  EC20  F006         	call	_RetardoLCD
   673  000C2A                     l1044:
   674                           
   675                           ;LibLCDXC8.h: 99: };LibLCDXC8.h: 100: BorraLCD();
   676  000C2A  EC25  F007         	call	_BorraLCD	;wreg free
   677                           
   678                           ;LibLCDXC8.h: 101: EnviaDato(0xF);
   679  000C2E  0E0F               	movlw	15
   680  000C30  EC74  F006         	call	_EnviaDato
   681                           
   682                           ;LibLCDXC8.h: 102: HabilitaLCD();
   683  000C34  EC2F  F007         	call	_HabilitaLCD	;wreg free
   684                           
   685                           ;LibLCDXC8.h: 103: RetardoLCD(4);
   686  000C38  0E04               	movlw	4
   687  000C3A  EC20  F006         	call	_RetardoLCD
   688  000C3E  0012               	return		;funcret
   689  000C40                     __end_of_InicializaLCD:
   690                           	callstack 0
   691                           
   692 ;; *************** function _BorraLCD *****************
   693 ;; Defined at:
   694 ;;		line 112 in file "LibLCDXC8.h"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, status,2, status,0, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   708 ;;      Params:         0       0       0       0       0       0       0       0       0
   709 ;;      Locals:         0       0       0       0       0       0       0       0       0
   710 ;;      Temps:          0       0       0       0       0       0       0       0       0
   711 ;;      Totals:         0       0       0       0       0       0       0       0       0
   712 ;;Total ram usage:        0 bytes
   713 ;; Hardware stack levels used: 1
   714 ;; Hardware stack levels required when called: 3
   715 ;; This function calls:
   716 ;;		_EnviaDato
   717 ;;		_HabilitaLCD
   718 ;;		_RetardoLCD
   719 ;; This function is called by:
   720 ;;		_InicializaLCD
   721 ;;		_main
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           	psect	text3
   726  000E4A                     __ptext3:
   727                           	callstack 0
   728  000E4A                     _BorraLCD:
   729                           	callstack 26
   730                           
   731                           ;LibLCDXC8.h: 114: LATD0=0;
   732                           
   733                           ;incstack = 0
   734  000E4A  908C               	bcf	3980,0,c	;volatile
   735                           
   736                           ;LibLCDXC8.h: 115: EnviaDato(0x01);
   737  000E4C  0E01               	movlw	1
   738  000E4E  EC74  F006         	call	_EnviaDato
   739                           
   740                           ;LibLCDXC8.h: 116: HabilitaLCD();
   741  000E52  EC2F  F007         	call	_HabilitaLCD	;wreg free
   742                           
   743                           ;LibLCDXC8.h: 117: RetardoLCD(2);
   744  000E56  0E02               	movlw	2
   745  000E58  EC20  F006         	call	_RetardoLCD
   746  000E5C  0012               	return		;funcret
   747  000E5E                     __end_of_BorraLCD:
   748                           	callstack 0
   749                           
   750 ;; *************** function _EscribeLCD_n16 *****************
   751 ;; Defined at:
   752 ;;		line 183 in file "LibLCDXC8.h"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  a               2   12[COMRAM] unsigned int 
   755 ;;  b               1   14[COMRAM] unsigned char 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  centena         2   17[COMRAM] unsigned int 
   758 ;;  millar          2   15[COMRAM] unsigned int 
   759 ;;  unidad          1   20[COMRAM] unsigned char 
   760 ;;  decena          1   19[COMRAM] unsigned char 
   761 ;; Return value:  Size  Location     Type
   762 ;;                  1    wreg      void 
   763 ;; Registers used:
   764 ;;		wreg, status,2, status,0, cstack
   765 ;; Tracked objects:
   766 ;;		On entry : 0/0
   767 ;;		On exit  : 0/0
   768 ;;		Unchanged: 0/0
   769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   770 ;;      Params:         3       0       0       0       0       0       0       0       0
   771 ;;      Locals:         6       0       0       0       0       0       0       0       0
   772 ;;      Temps:          0       0       0       0       0       0       0       0       0
   773 ;;      Totals:         9       0       0       0       0       0       0       0       0
   774 ;;Total ram usage:        9 bytes
   775 ;; Hardware stack levels used: 1
   776 ;; Hardware stack levels required when called: 4
   777 ;; This function calls:
   778 ;;		_EscribeLCD_c
   779 ;;		___lwdiv
   780 ;;		___lwmod
   781 ;; This function is called by:
   782 ;;		_main
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text4
   787  000818                     __ptext4:
   788                           	callstack 0
   789  000818                     _EscribeLCD_n16:
   790                           	callstack 26
   791                           
   792                           ;LibLCDXC8.h: 188: unsigned char decena,unidad;;LibLCDXC8.h: 189: unsigned int centena,m
      +                          illar;;LibLCDXC8.h: 190: LATD0=1;
   793                           
   794                           ;incstack = 0
   795  000818  808C               	bsf	3980,0,c	;volatile
   796                           
   797                           ;LibLCDXC8.h: 191: switch(b){
   798  00081A  D157               	goto	l1180
   799  00081C                     l1168:
   800  00081C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   801  000820  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   802  000824  0E00               	movlw	0
   803  000826  6E04               	movwf	(___lwmod@divisor+1)^0,c
   804  000828  0E0A               	movlw	10
   805  00082A  6E03               	movwf	___lwmod@divisor^0,c
   806  00082C  EC97  F006         	call	___lwmod	;wreg free
   807  000830  5001               	movf	?___lwmod^0,w,c
   808  000832  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   809                           
   810                           ;LibLCDXC8.h: 193: EscribeLCD_c(unidad+48);
   811  000834  5015               	movf	EscribeLCD_n16@unidad^0,w,c
   812  000836  0F30               	addlw	48
   813  000838  EC0F  F007         	call	_EscribeLCD_c
   814                           
   815                           ;LibLCDXC8.h: 194: break;
   816  00083C  0012               	return	
   817  00083E                     l1170:
   818  00083E  0E00               	movlw	0
   819  000840  6E04               	movwf	(___lwmod@divisor+1)^0,c
   820  000842  0E64               	movlw	100
   821  000844  6E03               	movwf	___lwmod@divisor^0,c
   822  000846  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   823  00084A  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   824  00084E  EC97  F006         	call	___lwmod	;wreg free
   825  000852  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   826  000856  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   827  00085A  0E00               	movlw	0
   828  00085C  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   829  00085E  0E0A               	movlw	10
   830  000860  6E08               	movwf	___lwdiv@divisor^0,c
   831  000862  EC4B  F006         	call	___lwdiv	;wreg free
   832  000866  5006               	movf	?___lwdiv^0,w,c
   833  000868  6E14               	movwf	EscribeLCD_n16@decena^0,c
   834                           
   835                           ;LibLCDXC8.h: 196: unidad=a%10;
   836  00086A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   837  00086E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   838  000872  0E00               	movlw	0
   839  000874  6E04               	movwf	(___lwmod@divisor+1)^0,c
   840  000876  0E0A               	movlw	10
   841  000878  6E03               	movwf	___lwmod@divisor^0,c
   842  00087A  EC97  F006         	call	___lwmod	;wreg free
   843  00087E  5001               	movf	?___lwmod^0,w,c
   844  000880  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   845                           
   846                           ;LibLCDXC8.h: 197: EscribeLCD_c(decena+48);
   847  000882  5014               	movf	EscribeLCD_n16@decena^0,w,c
   848  000884  0F30               	addlw	48
   849  000886  EC0F  F007         	call	_EscribeLCD_c
   850                           
   851                           ;LibLCDXC8.h: 198: EscribeLCD_c(unidad+48);
   852  00088A  5015               	movf	EscribeLCD_n16@unidad^0,w,c
   853  00088C  0F30               	addlw	48
   854  00088E  EC0F  F007         	call	_EscribeLCD_c
   855                           
   856                           ;LibLCDXC8.h: 199: break;
   857  000892  0012               	return	
   858  000894                     l1172:
   859  000894  0E03               	movlw	3
   860  000896  6E04               	movwf	(___lwmod@divisor+1)^0,c
   861  000898  0EE8               	movlw	232
   862  00089A  6E03               	movwf	___lwmod@divisor^0,c
   863  00089C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   864  0008A0  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   865  0008A4  EC97  F006         	call	___lwmod	;wreg free
   866  0008A8  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   867  0008AC  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   868  0008B0  0E00               	movlw	0
   869  0008B2  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   870  0008B4  0E64               	movlw	100
   871  0008B6  6E08               	movwf	___lwdiv@divisor^0,c
   872  0008B8  EC4B  F006         	call	___lwdiv	;wreg free
   873  0008BC  C006  F012         	movff	?___lwdiv,EscribeLCD_n16@centena
   874  0008C0  C007  F013         	movff	?___lwdiv+1,EscribeLCD_n16@centena+1
   875                           
   876                           ;LibLCDXC8.h: 201: decena=(a%100)/10;
   877  0008C4  0E00               	movlw	0
   878  0008C6  6E04               	movwf	(___lwmod@divisor+1)^0,c
   879  0008C8  0E64               	movlw	100
   880  0008CA  6E03               	movwf	___lwmod@divisor^0,c
   881  0008CC  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   882  0008D0  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   883  0008D4  EC97  F006         	call	___lwmod	;wreg free
   884  0008D8  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   885  0008DC  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   886  0008E0  0E00               	movlw	0
   887  0008E2  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   888  0008E4  0E0A               	movlw	10
   889  0008E6  6E08               	movwf	___lwdiv@divisor^0,c
   890  0008E8  EC4B  F006         	call	___lwdiv	;wreg free
   891  0008EC  5006               	movf	?___lwdiv^0,w,c
   892  0008EE  6E14               	movwf	EscribeLCD_n16@decena^0,c
   893                           
   894                           ;LibLCDXC8.h: 202: unidad=a%10;
   895  0008F0  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   896  0008F4  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   897  0008F8  0E00               	movlw	0
   898  0008FA  6E04               	movwf	(___lwmod@divisor+1)^0,c
   899  0008FC  0E0A               	movlw	10
   900  0008FE  6E03               	movwf	___lwmod@divisor^0,c
   901  000900  EC97  F006         	call	___lwmod	;wreg free
   902  000904  5001               	movf	?___lwmod^0,w,c
   903  000906  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   904                           
   905                           ;LibLCDXC8.h: 203: EscribeLCD_c(centena+48);
   906  000908  5012               	movf	EscribeLCD_n16@centena^0,w,c
   907  00090A  0F30               	addlw	48
   908  00090C  EC0F  F007         	call	_EscribeLCD_c
   909                           
   910                           ;LibLCDXC8.h: 204: EscribeLCD_c(decena+48);
   911  000910  5014               	movf	EscribeLCD_n16@decena^0,w,c
   912  000912  0F30               	addlw	48
   913  000914  EC0F  F007         	call	_EscribeLCD_c
   914                           
   915                           ;LibLCDXC8.h: 205: EscribeLCD_c(unidad+48);
   916  000918  5015               	movf	EscribeLCD_n16@unidad^0,w,c
   917  00091A  0F30               	addlw	48
   918  00091C  EC0F  F007         	call	_EscribeLCD_c
   919                           
   920                           ;LibLCDXC8.h: 206: break;
   921  000920  0012               	return	
   922  000922                     l1174:
   923  000922  0E27               	movlw	39
   924  000924  6E04               	movwf	(___lwmod@divisor+1)^0,c
   925  000926  0E10               	movlw	16
   926  000928  6E03               	movwf	___lwmod@divisor^0,c
   927  00092A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   928  00092E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   929  000932  EC97  F006         	call	___lwmod	;wreg free
   930  000936  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   931  00093A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   932  00093E  0E03               	movlw	3
   933  000940  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   934  000942  0EE8               	movlw	232
   935  000944  6E08               	movwf	___lwdiv@divisor^0,c
   936  000946  EC4B  F006         	call	___lwdiv	;wreg free
   937  00094A  C006  F010         	movff	?___lwdiv,EscribeLCD_n16@millar
   938  00094E  C007  F011         	movff	?___lwdiv+1,EscribeLCD_n16@millar+1
   939                           
   940                           ;LibLCDXC8.h: 208: centena=(a%1000)/100;
   941  000952  0E03               	movlw	3
   942  000954  6E04               	movwf	(___lwmod@divisor+1)^0,c
   943  000956  0EE8               	movlw	232
   944  000958  6E03               	movwf	___lwmod@divisor^0,c
   945  00095A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   946  00095E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   947  000962  EC97  F006         	call	___lwmod	;wreg free
   948  000966  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   949  00096A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   950  00096E  0E00               	movlw	0
   951  000970  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   952  000972  0E64               	movlw	100
   953  000974  6E08               	movwf	___lwdiv@divisor^0,c
   954  000976  EC4B  F006         	call	___lwdiv	;wreg free
   955  00097A  C006  F012         	movff	?___lwdiv,EscribeLCD_n16@centena
   956  00097E  C007  F013         	movff	?___lwdiv+1,EscribeLCD_n16@centena+1
   957                           
   958                           ;LibLCDXC8.h: 209: decena=(a%100)/10;
   959  000982  0E00               	movlw	0
   960  000984  6E04               	movwf	(___lwmod@divisor+1)^0,c
   961  000986  0E64               	movlw	100
   962  000988  6E03               	movwf	___lwmod@divisor^0,c
   963  00098A  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   964  00098E  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   965  000992  EC97  F006         	call	___lwmod	;wreg free
   966  000996  C001  F006         	movff	?___lwmod,___lwdiv@dividend
   967  00099A  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
   968  00099E  0E00               	movlw	0
   969  0009A0  6E09               	movwf	(___lwdiv@divisor+1)^0,c
   970  0009A2  0E0A               	movlw	10
   971  0009A4  6E08               	movwf	___lwdiv@divisor^0,c
   972  0009A6  EC4B  F006         	call	___lwdiv	;wreg free
   973  0009AA  5006               	movf	?___lwdiv^0,w,c
   974  0009AC  6E14               	movwf	EscribeLCD_n16@decena^0,c
   975                           
   976                           ;LibLCDXC8.h: 210: unidad=a%10;
   977  0009AE  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
   978  0009B2  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
   979  0009B6  0E00               	movlw	0
   980  0009B8  6E04               	movwf	(___lwmod@divisor+1)^0,c
   981  0009BA  0E0A               	movlw	10
   982  0009BC  6E03               	movwf	___lwmod@divisor^0,c
   983  0009BE  EC97  F006         	call	___lwmod	;wreg free
   984  0009C2  5001               	movf	?___lwmod^0,w,c
   985  0009C4  6E15               	movwf	EscribeLCD_n16@unidad^0,c
   986                           
   987                           ;LibLCDXC8.h: 211: EscribeLCD_c(millar+48);
   988  0009C6  5010               	movf	EscribeLCD_n16@millar^0,w,c
   989  0009C8  0F30               	addlw	48
   990  0009CA  EC0F  F007         	call	_EscribeLCD_c
   991                           
   992                           ;LibLCDXC8.h: 212: EscribeLCD_c(centena+48);
   993  0009CE  5012               	movf	EscribeLCD_n16@centena^0,w,c
   994  0009D0  0F30               	addlw	48
   995  0009D2  EC0F  F007         	call	_EscribeLCD_c
   996                           
   997                           ;LibLCDXC8.h: 213: EscribeLCD_c(decena+48);
   998  0009D6  5014               	movf	EscribeLCD_n16@decena^0,w,c
   999  0009D8  0F30               	addlw	48
  1000  0009DA  EC0F  F007         	call	_EscribeLCD_c
  1001                           
  1002                           ;LibLCDXC8.h: 214: EscribeLCD_c(unidad+48);
  1003  0009DE  5015               	movf	EscribeLCD_n16@unidad^0,w,c
  1004  0009E0  0F30               	addlw	48
  1005  0009E2  EC0F  F007         	call	_EscribeLCD_c
  1006                           
  1007                           ;LibLCDXC8.h: 215: break;
  1008  0009E6  0012               	return	
  1009  0009E8                     l1176:
  1010  0009E8  C00D  F006         	movff	EscribeLCD_n16@a,___lwdiv@dividend
  1011  0009EC  C00E  F007         	movff	EscribeLCD_n16@a+1,___lwdiv@dividend+1
  1012  0009F0  0E27               	movlw	39
  1013  0009F2  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1014  0009F4  0E10               	movlw	16
  1015  0009F6  6E08               	movwf	___lwdiv@divisor^0,c
  1016  0009F8  EC4B  F006         	call	___lwdiv	;wreg free
  1017  0009FC  5006               	movf	?___lwdiv^0,w,c
  1018  0009FE  0F30               	addlw	48
  1019  000A00  EC0F  F007         	call	_EscribeLCD_c
  1020                           
  1021                           ;LibLCDXC8.h: 217: millar=(a%10000)/1000;
  1022  000A04  0E27               	movlw	39
  1023  000A06  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1024  000A08  0E10               	movlw	16
  1025  000A0A  6E03               	movwf	___lwmod@divisor^0,c
  1026  000A0C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1027  000A10  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1028  000A14  EC97  F006         	call	___lwmod	;wreg free
  1029  000A18  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1030  000A1C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1031  000A20  0E03               	movlw	3
  1032  000A22  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1033  000A24  0EE8               	movlw	232
  1034  000A26  6E08               	movwf	___lwdiv@divisor^0,c
  1035  000A28  EC4B  F006         	call	___lwdiv	;wreg free
  1036  000A2C  C006  F010         	movff	?___lwdiv,EscribeLCD_n16@millar
  1037  000A30  C007  F011         	movff	?___lwdiv+1,EscribeLCD_n16@millar+1
  1038                           
  1039                           ;LibLCDXC8.h: 218: centena=(a%1000)/100;
  1040  000A34  0E03               	movlw	3
  1041  000A36  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1042  000A38  0EE8               	movlw	232
  1043  000A3A  6E03               	movwf	___lwmod@divisor^0,c
  1044  000A3C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1045  000A40  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1046  000A44  EC97  F006         	call	___lwmod	;wreg free
  1047  000A48  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1048  000A4C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1049  000A50  0E00               	movlw	0
  1050  000A52  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1051  000A54  0E64               	movlw	100
  1052  000A56  6E08               	movwf	___lwdiv@divisor^0,c
  1053  000A58  EC4B  F006         	call	___lwdiv	;wreg free
  1054  000A5C  C006  F012         	movff	?___lwdiv,EscribeLCD_n16@centena
  1055  000A60  C007  F013         	movff	?___lwdiv+1,EscribeLCD_n16@centena+1
  1056                           
  1057                           ;LibLCDXC8.h: 219: decena=(a%100)/10;
  1058  000A64  0E00               	movlw	0
  1059  000A66  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1060  000A68  0E64               	movlw	100
  1061  000A6A  6E03               	movwf	___lwmod@divisor^0,c
  1062  000A6C  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1063  000A70  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1064  000A74  EC97  F006         	call	___lwmod	;wreg free
  1065  000A78  C001  F006         	movff	?___lwmod,___lwdiv@dividend
  1066  000A7C  C002  F007         	movff	?___lwmod+1,___lwdiv@dividend+1
  1067  000A80  0E00               	movlw	0
  1068  000A82  6E09               	movwf	(___lwdiv@divisor+1)^0,c
  1069  000A84  0E0A               	movlw	10
  1070  000A86  6E08               	movwf	___lwdiv@divisor^0,c
  1071  000A88  EC4B  F006         	call	___lwdiv	;wreg free
  1072  000A8C  5006               	movf	?___lwdiv^0,w,c
  1073  000A8E  6E14               	movwf	EscribeLCD_n16@decena^0,c
  1074                           
  1075                           ;LibLCDXC8.h: 220: unidad=a%10;
  1076  000A90  C00D  F001         	movff	EscribeLCD_n16@a,___lwmod@dividend
  1077  000A94  C00E  F002         	movff	EscribeLCD_n16@a+1,___lwmod@dividend+1
  1078  000A98  0E00               	movlw	0
  1079  000A9A  6E04               	movwf	(___lwmod@divisor+1)^0,c
  1080  000A9C  0E0A               	movlw	10
  1081  000A9E  6E03               	movwf	___lwmod@divisor^0,c
  1082  000AA0  EC97  F006         	call	___lwmod	;wreg free
  1083  000AA4  5001               	movf	?___lwmod^0,w,c
  1084  000AA6  6E15               	movwf	EscribeLCD_n16@unidad^0,c
  1085                           
  1086                           ;LibLCDXC8.h: 221: EscribeLCD_c(millar+48);
  1087  000AA8  5010               	movf	EscribeLCD_n16@millar^0,w,c
  1088  000AAA  0F30               	addlw	48
  1089  000AAC  EC0F  F007         	call	_EscribeLCD_c
  1090                           
  1091                           ;LibLCDXC8.h: 222: EscribeLCD_c(centena+48);
  1092  000AB0  5012               	movf	EscribeLCD_n16@centena^0,w,c
  1093  000AB2  0F30               	addlw	48
  1094  000AB4  EC0F  F007         	call	_EscribeLCD_c
  1095                           
  1096                           ;LibLCDXC8.h: 223: EscribeLCD_c(decena+48);
  1097  000AB8  5014               	movf	EscribeLCD_n16@decena^0,w,c
  1098  000ABA  0F30               	addlw	48
  1099  000ABC  EC0F  F007         	call	_EscribeLCD_c
  1100                           
  1101                           ;LibLCDXC8.h: 224: EscribeLCD_c(unidad+48);
  1102  000AC0  5015               	movf	EscribeLCD_n16@unidad^0,w,c
  1103  000AC2  0F30               	addlw	48
  1104  000AC4  EC0F  F007         	call	_EscribeLCD_c
  1105                           
  1106                           ;LibLCDXC8.h: 225: break;
  1107  000AC8  0012               	return	
  1108  000ACA                     l1180:
  1109  000ACA  500F               	movf	EscribeLCD_n16@b^0,w,c
  1110                           
  1111                           ; Switch size 1, requested type "simple"
  1112                           ; Number of cases is 5, Range of values is 1 to 5
  1113                           ; switch strategies available:
  1114                           ; Name         Instructions Cycles
  1115                           ; simple_byte           16     9 (average)
  1116                           ;	Chosen strategy is simple_byte
  1117  000ACC  0A01               	xorlw	1	; case 1
  1118  000ACE  B4D8               	btfsc	status,2,c
  1119  000AD0  D6A5               	goto	l1168
  1120  000AD2  0A03               	xorlw	3	; case 2
  1121  000AD4  B4D8               	btfsc	status,2,c
  1122  000AD6  D6B3               	goto	l1170
  1123  000AD8  0A01               	xorlw	1	; case 3
  1124  000ADA  B4D8               	btfsc	status,2,c
  1125  000ADC  D6DB               	goto	l1172
  1126  000ADE  0A07               	xorlw	7	; case 4
  1127  000AE0  B4D8               	btfsc	status,2,c
  1128  000AE2  D71F               	goto	l1174
  1129  000AE4  0A01               	xorlw	1	; case 5
  1130  000AE6  A4D8               	btfss	status,2,c
  1131  000AE8  0012               	return	
  1132  000AEA  D77E               	goto	l1176
  1133  000AEC                     __end_of_EscribeLCD_n16:
  1134                           	callstack 0
  1135                           
  1136 ;; *************** function ___lwmod *****************
  1137 ;; Defined at:
  1138 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;  dividend        2    0[COMRAM] unsigned int 
  1141 ;;  divisor         2    2[COMRAM] unsigned int 
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  counter         1    4[COMRAM] unsigned char 
  1144 ;; Return value:  Size  Location     Type
  1145 ;;                  2    0[COMRAM] unsigned int 
  1146 ;; Registers used:
  1147 ;;		wreg, status,2, status,0
  1148 ;; Tracked objects:
  1149 ;;		On entry : 0/0
  1150 ;;		On exit  : 0/0
  1151 ;;		Unchanged: 0/0
  1152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1153 ;;      Params:         4       0       0       0       0       0       0       0       0
  1154 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1155 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1156 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1157 ;;Total ram usage:        5 bytes
  1158 ;; Hardware stack levels used: 1
  1159 ;; Hardware stack levels required when called: 1
  1160 ;; This function calls:
  1161 ;;		Nothing
  1162 ;; This function is called by:
  1163 ;;		_EscribeLCD_n16
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text5
  1168  000D2E                     __ptext5:
  1169                           	callstack 0
  1170  000D2E                     ___lwmod:
  1171                           	callstack 28
  1172                           
  1173                           ;incstack = 0
  1174  000D2E  5003               	movf	___lwmod@divisor^0,w,c
  1175  000D30  1004               	iorwf	(___lwmod@divisor+1)^0,w,c
  1176  000D32  B4D8               	btfsc	status,2,c
  1177  000D34  D018               	goto	l650
  1178  000D36  0E01               	movlw	1
  1179  000D38  6E05               	movwf	___lwmod@counter^0,c
  1180  000D3A  D004               	goto	l1156
  1181  000D3C                     l1154:
  1182  000D3C  90D8               	bcf	status,0,c
  1183  000D3E  3603               	rlcf	___lwmod@divisor^0,f,c
  1184  000D40  3604               	rlcf	(___lwmod@divisor+1)^0,f,c
  1185  000D42  2A05               	incf	___lwmod@counter^0,f,c
  1186  000D44                     l1156:
  1187  000D44  AE04               	btfss	(___lwmod@divisor+1)^0,7,c
  1188  000D46  D7FA               	goto	l1154
  1189  000D48                     u220:
  1190  000D48  5003               	movf	___lwmod@divisor^0,w,c
  1191  000D4A  5C01               	subwf	___lwmod@dividend^0,w,c
  1192  000D4C  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1193  000D4E  5802               	subwfb	(___lwmod@dividend+1)^0,w,c
  1194  000D50  A0D8               	btfss	status,0,c
  1195  000D52  D004               	goto	l1162
  1196  000D54  5003               	movf	___lwmod@divisor^0,w,c
  1197  000D56  5E01               	subwf	___lwmod@dividend^0,f,c
  1198  000D58  5004               	movf	(___lwmod@divisor+1)^0,w,c
  1199  000D5A  5A02               	subwfb	(___lwmod@dividend+1)^0,f,c
  1200  000D5C                     l1162:
  1201  000D5C  90D8               	bcf	status,0,c
  1202  000D5E  3204               	rrcf	(___lwmod@divisor+1)^0,f,c
  1203  000D60  3203               	rrcf	___lwmod@divisor^0,f,c
  1204  000D62  2E05               	decfsz	___lwmod@counter^0,f,c
  1205  000D64  D7F1               	goto	u220
  1206  000D66                     l650:
  1207  000D66  C001  F001         	movff	___lwmod@dividend,?___lwmod
  1208  000D6A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  1209  000D6E  0012               	return		;funcret
  1210  000D70                     __end_of___lwmod:
  1211                           	callstack 0
  1212                           
  1213 ;; *************** function ___lwdiv *****************
  1214 ;; Defined at:
  1215 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  dividend        2    5[COMRAM] unsigned int 
  1218 ;;  divisor         2    7[COMRAM] unsigned int 
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  quotient        2    9[COMRAM] unsigned int 
  1221 ;;  counter         1   11[COMRAM] unsigned char 
  1222 ;; Return value:  Size  Location     Type
  1223 ;;                  2    5[COMRAM] unsigned int 
  1224 ;; Registers used:
  1225 ;;		wreg, status,2, status,0
  1226 ;; Tracked objects:
  1227 ;;		On entry : 0/0
  1228 ;;		On exit  : 0/0
  1229 ;;		Unchanged: 0/0
  1230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1231 ;;      Params:         4       0       0       0       0       0       0       0       0
  1232 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1233 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1234 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1235 ;;Total ram usage:        7 bytes
  1236 ;; Hardware stack levels used: 1
  1237 ;; Hardware stack levels required when called: 1
  1238 ;; This function calls:
  1239 ;;		Nothing
  1240 ;; This function is called by:
  1241 ;;		_EscribeLCD_n16
  1242 ;; This function uses a non-reentrant model
  1243 ;;
  1244                           
  1245                           	psect	text6
  1246  000C96                     __ptext6:
  1247                           	callstack 0
  1248  000C96                     ___lwdiv:
  1249                           	callstack 28
  1250                           
  1251                           ;incstack = 0
  1252  000C96  0E00               	movlw	0
  1253  000C98  6E0B               	movwf	(___lwdiv@quotient+1)^0,c
  1254  000C9A  0E00               	movlw	0
  1255  000C9C  6E0A               	movwf	___lwdiv@quotient^0,c
  1256  000C9E  5008               	movf	___lwdiv@divisor^0,w,c
  1257  000CA0  1009               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1258  000CA2  B4D8               	btfsc	status,2,c
  1259  000CA4  D01C               	goto	l640
  1260  000CA6  0E01               	movlw	1
  1261  000CA8  6E0C               	movwf	___lwdiv@counter^0,c
  1262  000CAA  D004               	goto	l1136
  1263  000CAC                     l1134:
  1264  000CAC  90D8               	bcf	status,0,c
  1265  000CAE  3608               	rlcf	___lwdiv@divisor^0,f,c
  1266  000CB0  3609               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1267  000CB2  2A0C               	incf	___lwdiv@counter^0,f,c
  1268  000CB4                     l1136:
  1269  000CB4  AE09               	btfss	(___lwdiv@divisor+1)^0,7,c
  1270  000CB6  D7FA               	goto	l1134
  1271  000CB8                     u190:
  1272  000CB8  90D8               	bcf	status,0,c
  1273  000CBA  360A               	rlcf	___lwdiv@quotient^0,f,c
  1274  000CBC  360B               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1275  000CBE  5008               	movf	___lwdiv@divisor^0,w,c
  1276  000CC0  5C06               	subwf	___lwdiv@dividend^0,w,c
  1277  000CC2  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1278  000CC4  5807               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1279  000CC6  A0D8               	btfss	status,0,c
  1280  000CC8  D005               	goto	l1146
  1281  000CCA  5008               	movf	___lwdiv@divisor^0,w,c
  1282  000CCC  5E06               	subwf	___lwdiv@dividend^0,f,c
  1283  000CCE  5009               	movf	(___lwdiv@divisor+1)^0,w,c
  1284  000CD0  5A07               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1285  000CD2  800A               	bsf	___lwdiv@quotient^0,0,c
  1286  000CD4                     l1146:
  1287  000CD4  90D8               	bcf	status,0,c
  1288  000CD6  3209               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1289  000CD8  3208               	rrcf	___lwdiv@divisor^0,f,c
  1290  000CDA  2E0C               	decfsz	___lwdiv@counter^0,f,c
  1291  000CDC  D7ED               	goto	u190
  1292  000CDE                     l640:
  1293  000CDE  C00A  F006         	movff	___lwdiv@quotient,?___lwdiv
  1294  000CE2  C00B  F007         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1295  000CE6  0012               	return		;funcret
  1296  000CE8                     __end_of___lwdiv:
  1297                           	callstack 0
  1298                           
  1299 ;; *************** function _EscribeLCD_c *****************
  1300 ;; Defined at:
  1301 ;;		line 136 in file "LibLCDXC8.h"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;  a               1    wreg     unsigned char 
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  a               1    4[COMRAM] unsigned char 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg, status,2, status,0, cstack
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1315 ;;      Params:         0       0       0       0       0       0       0       0       0
  1316 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1318 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1319 ;;Total ram usage:        1 bytes
  1320 ;; Hardware stack levels used: 1
  1321 ;; Hardware stack levels required when called: 3
  1322 ;; This function calls:
  1323 ;;		_EnviaDato
  1324 ;;		_HabilitaLCD
  1325 ;;		_RetardoLCD
  1326 ;; This function is called by:
  1327 ;;		_EscribeLCD_n16
  1328 ;;		_MensajeLCD_Var
  1329 ;; This function uses a non-reentrant model
  1330 ;;
  1331                           
  1332                           	psect	text7
  1333  000E1E                     __ptext7:
  1334                           	callstack 0
  1335  000E1E                     _EscribeLCD_c:
  1336                           	callstack 26
  1337                           
  1338                           ;incstack = 0
  1339                           ;EscribeLCD_c@a stored from wreg
  1340  000E1E  6E05               	movwf	EscribeLCD_c@a^0,c
  1341                           
  1342                           ;LibLCDXC8.h: 140: LATD0=1;
  1343  000E20  808C               	bsf	3980,0,c	;volatile
  1344                           
  1345                           ;LibLCDXC8.h: 141: EnviaDato(a);
  1346  000E22  5005               	movf	EscribeLCD_c@a^0,w,c
  1347  000E24  EC74  F006         	call	_EnviaDato
  1348                           
  1349                           ;LibLCDXC8.h: 142: HabilitaLCD();
  1350  000E28  EC2F  F007         	call	_HabilitaLCD	;wreg free
  1351                           
  1352                           ;LibLCDXC8.h: 143: RetardoLCD(4);
  1353  000E2C  0E04               	movlw	4
  1354  000E2E  EC20  F006         	call	_RetardoLCD
  1355  000E32  0012               	return		;funcret
  1356  000E34                     __end_of_EscribeLCD_c:
  1357                           	callstack 0
  1358                           
  1359 ;; *************** function _DireccionaLCD *****************
  1360 ;; Defined at:
  1361 ;;		line 241 in file "LibLCDXC8.h"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  a               1    wreg     unsigned char 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  a               1    4[COMRAM] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, status,2, status,0, cstack
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1375 ;;      Params:         0       0       0       0       0       0       0       0       0
  1376 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1378 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1379 ;;Total ram usage:        1 bytes
  1380 ;; Hardware stack levels used: 1
  1381 ;; Hardware stack levels required when called: 3
  1382 ;; This function calls:
  1383 ;;		_EnviaDato
  1384 ;;		_HabilitaLCD
  1385 ;;		_RetardoLCD
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           	psect	text8
  1392  000E34                     __ptext8:
  1393                           	callstack 0
  1394  000E34                     _DireccionaLCD:
  1395                           	callstack 27
  1396                           
  1397                           ;incstack = 0
  1398                           ;DireccionaLCD@a stored from wreg
  1399  000E34  6E05               	movwf	DireccionaLCD@a^0,c
  1400                           
  1401                           ;LibLCDXC8.h: 244: LATD0=0;
  1402  000E36  908C               	bcf	3980,0,c	;volatile
  1403                           
  1404                           ;LibLCDXC8.h: 245: EnviaDato(a);
  1405  000E38  5005               	movf	DireccionaLCD@a^0,w,c
  1406  000E3A  EC74  F006         	call	_EnviaDato
  1407                           
  1408                           ;LibLCDXC8.h: 246: HabilitaLCD();
  1409  000E3E  EC2F  F007         	call	_HabilitaLCD	;wreg free
  1410                           
  1411                           ;LibLCDXC8.h: 247: RetardoLCD(4);
  1412  000E42  0E04               	movlw	4
  1413  000E44  EC20  F006         	call	_RetardoLCD
  1414  000E48  0012               	return		;funcret
  1415  000E4A                     __end_of_DireccionaLCD:
  1416                           	callstack 0
  1417                           
  1418 ;; *************** function _EnviaDato *****************
  1419 ;; Defined at:
  1420 ;;		line 59 in file "LibLCDXC8.h"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  a               1    wreg     unsigned char 
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;  a               1    3[COMRAM] unsigned char 
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, status,2, status,0, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1434 ;;      Params:         0       0       0       0       0       0       0       0       0
  1435 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1436 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1437 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1438 ;;Total ram usage:        2 bytes
  1439 ;; Hardware stack levels used: 1
  1440 ;; Hardware stack levels required when called: 2
  1441 ;; This function calls:
  1442 ;;		_HabilitaLCD
  1443 ;;		_RetardoLCD
  1444 ;; This function is called by:
  1445 ;;		_InicializaLCD
  1446 ;;		_BorraLCD
  1447 ;;		_EscribeLCD_c
  1448 ;;		_DireccionaLCD
  1449 ;; This function uses a non-reentrant model
  1450 ;;
  1451                           
  1452                           	psect	text9
  1453  000CE8                     __ptext9:
  1454                           	callstack 0
  1455  000CE8                     _EnviaDato:
  1456                           	callstack 26
  1457                           
  1458                           ;incstack = 0
  1459                           ;EnviaDato@a stored from wreg
  1460  000CE8  6E04               	movwf	EnviaDato@a^0,c
  1461                           
  1462                           ;LibLCDXC8.h: 60: if(interfaz==4){
  1463  000CEA  0E04               	movlw	4
  1464  000CEC  181E               	xorwf	_interfaz^0,w,c
  1465  000CEE  A4D8               	btfss	status,2,c
  1466  000CF0  D017               	goto	l936
  1467                           
  1468                           ;LibLCDXC8.h: 61: LATD=(LATD & 0b00001111) | (a & 0b11110000);
  1469  000CF2  C004  F003         	movff	EnviaDato@a,??_EnviaDato
  1470  000CF6  0EF0               	movlw	240
  1471  000CF8  1603               	andwf	??_EnviaDato^0,f,c
  1472  000CFA  508C               	movf	140,w,c	;volatile
  1473  000CFC  0B0F               	andlw	15
  1474  000CFE  1003               	iorwf	??_EnviaDato^0,w,c
  1475  000D00  6E8C               	movwf	140,c	;volatile
  1476                           
  1477                           ;LibLCDXC8.h: 62: HabilitaLCD();
  1478  000D02  EC2F  F007         	call	_HabilitaLCD	;wreg free
  1479                           
  1480                           ;LibLCDXC8.h: 63: RetardoLCD(1);
  1481  000D06  0E01               	movlw	1
  1482  000D08  EC20  F006         	call	_RetardoLCD
  1483                           
  1484                           ;LibLCDXC8.h: 64: LATD=(LATD & 0b00001111) | (a<<4);
  1485  000D0C  C004  F003         	movff	EnviaDato@a,??_EnviaDato
  1486  000D10  3A03               	swapf	??_EnviaDato^0,f,c
  1487  000D12  0EF0               	movlw	240
  1488  000D14  1603               	andwf	??_EnviaDato^0,f,c
  1489  000D16  508C               	movf	140,w,c	;volatile
  1490  000D18  0B0F               	andlw	15
  1491  000D1A  1003               	iorwf	??_EnviaDato^0,w,c
  1492  000D1C  6E8C               	movwf	140,c	;volatile
  1493                           
  1494                           ;LibLCDXC8.h: 67: }else if(interfaz==8){
  1495  000D1E  0012               	return	
  1496  000D20                     l936:
  1497  000D20  0E08               	movlw	8
  1498  000D22  181E               	xorwf	_interfaz^0,w,c
  1499  000D24  A4D8               	btfss	status,2,c
  1500  000D26  0012               	return	
  1501                           
  1502                           ;LibLCDXC8.h: 68: LATD=a;
  1503  000D28  C004  FF8C         	movff	EnviaDato@a,3980	;volatile
  1504  000D2C  0012               	return		;funcret
  1505  000D2E                     __end_of_EnviaDato:
  1506                           	callstack 0
  1507                           
  1508 ;; *************** function _RetardoLCD *****************
  1509 ;; Defined at:
  1510 ;;		line 274 in file "LibLCDXC8.h"
  1511 ;; Parameters:    Size  Location     Type
  1512 ;;  a               1    wreg     unsigned char 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  a               1    1[COMRAM] unsigned char 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, status,2, status,0
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1524 ;;      Params:         0       0       0       0       0       0       0       0       0
  1525 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1526 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1527 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1528 ;;Total ram usage:        2 bytes
  1529 ;; Hardware stack levels used: 1
  1530 ;; Hardware stack levels required when called: 1
  1531 ;; This function calls:
  1532 ;;		Nothing
  1533 ;; This function is called by:
  1534 ;;		_EnviaDato
  1535 ;;		_InicializaLCD
  1536 ;;		_BorraLCD
  1537 ;;		_EscribeLCD_c
  1538 ;;		_DireccionaLCD
  1539 ;; This function uses a non-reentrant model
  1540 ;;
  1541                           
  1542                           	psect	text10
  1543  000C40                     __ptext10:
  1544                           	callstack 0
  1545  000C40                     _RetardoLCD:
  1546                           	callstack 27
  1547                           
  1548                           ;incstack = 0
  1549                           ;RetardoLCD@a stored from wreg
  1550  000C40  6E02               	movwf	RetardoLCD@a^0,c
  1551                           
  1552                           ;LibLCDXC8.h: 275: switch(a){
  1553  000C42  D01B               	goto	l924
  1554  000C44                     l914:
  1555  000C44  0E05               	movlw	5
  1556  000C46  6E01               	movwf	??_RetardoLCD^0,c
  1557  000C48  0EDE               	movlw	222
  1558  000C4A                     u297:
  1559  000C4A  2EE8               	decfsz	wreg,f,c
  1560  000C4C  D7FE               	bra	u297
  1561  000C4E  2E01               	decfsz	??_RetardoLCD^0,f,c
  1562  000C50  D7FC               	bra	u297
  1563                           
  1564                           ;LibLCDXC8.h: 278: break;
  1565  000C52  0012               	return	
  1566  000C54                     l916:
  1567  000C54  0E53               	movlw	83
  1568  000C56                     u307:
  1569  000C56  2EE8               	decfsz	wreg,f,c
  1570  000C58  D7FE               	bra	u307
  1571  000C5A  F000               	nop	
  1572                           
  1573                           ;LibLCDXC8.h: 280: _delay((unsigned long)((640)*(1000000/4000000.0)));
  1574  000C5C  0E35               	movlw	53
  1575  000C5E                     u317:
  1576  000C5E  2EE8               	decfsz	wreg,f,c
  1577  000C60  D7FE               	bra	u317
  1578  000C62  F000               	nop	
  1579                           
  1580                           ;LibLCDXC8.h: 282: break;
  1581  000C64  0012               	return	
  1582  000C66                     l918:
  1583  000C66  0E08               	movlw	8
  1584  000C68                     u327:
  1585  000C68  2EE8               	decfsz	wreg,f,c
  1586  000C6A  D7FE               	bra	u327
  1587  000C6C  F000               	nop	
  1588                           
  1589                           ;LibLCDXC8.h: 285: break;
  1590  000C6E  0012               	return	
  1591  000C70                     l920:
  1592  000C70  0E03               	movlw	3
  1593  000C72                     u337:
  1594  000C72  2EE8               	decfsz	wreg,f,c
  1595  000C74  D7FE               	bra	u337
  1596  000C76  F000               	nop	
  1597                           
  1598                           ;LibLCDXC8.h: 288: break;
  1599  000C78  0012               	return	
  1600  000C7A                     l924:
  1601  000C7A  5002               	movf	RetardoLCD@a^0,w,c
  1602                           
  1603                           ; Switch size 1, requested type "simple"
  1604                           ; Number of cases is 4, Range of values is 1 to 4
  1605                           ; switch strategies available:
  1606                           ; Name         Instructions Cycles
  1607                           ; simple_byte           13     7 (average)
  1608                           ;	Chosen strategy is simple_byte
  1609  000C7C  0A01               	xorlw	1	; case 1
  1610  000C7E  B4D8               	btfsc	status,2,c
  1611  000C80  D7E1               	goto	l914
  1612  000C82  0A03               	xorlw	3	; case 2
  1613  000C84  B4D8               	btfsc	status,2,c
  1614  000C86  D7E6               	goto	l916
  1615  000C88  0A01               	xorlw	1	; case 3
  1616  000C8A  B4D8               	btfsc	status,2,c
  1617  000C8C  D7EC               	goto	l918
  1618  000C8E  0A07               	xorlw	7	; case 4
  1619  000C90  A4D8               	btfss	status,2,c
  1620  000C92  0012               	return	
  1621  000C94  D7ED               	goto	l920
  1622  000C96                     __end_of_RetardoLCD:
  1623                           	callstack 0
  1624                           
  1625 ;; *************** function _HabilitaLCD *****************
  1626 ;; Defined at:
  1627 ;;		line 105 in file "LibLCDXC8.h"
  1628 ;; Parameters:    Size  Location     Type
  1629 ;;		None
  1630 ;; Auto vars:     Size  Location     Type
  1631 ;;		None
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		wreg
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1641 ;;      Params:         0       0       0       0       0       0       0       0       0
  1642 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1643 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1644 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1645 ;;Total ram usage:        0 bytes
  1646 ;; Hardware stack levels used: 1
  1647 ;; Hardware stack levels required when called: 1
  1648 ;; This function calls:
  1649 ;;		Nothing
  1650 ;; This function is called by:
  1651 ;;		_EnviaDato
  1652 ;;		_InicializaLCD
  1653 ;;		_BorraLCD
  1654 ;;		_EscribeLCD_c
  1655 ;;		_DireccionaLCD
  1656 ;; This function uses a non-reentrant model
  1657 ;;
  1658                           
  1659                           	psect	text11
  1660  000E5E                     __ptext11:
  1661                           	callstack 0
  1662  000E5E                     _HabilitaLCD:
  1663                           	callstack 27
  1664                           
  1665                           ;LibLCDXC8.h: 107: LATD1=1;
  1666                           
  1667                           ;incstack = 0
  1668  000E5E  828C               	bsf	3980,1,c	;volatile
  1669                           
  1670                           ;LibLCDXC8.h: 108: _delay((unsigned long)((40)*(1000000/4000000.0)));
  1671  000E60  0E03               	movlw	3
  1672  000E62                     u347:
  1673  000E62  2EE8               	decfsz	wreg,f,c
  1674  000E64  D7FE               	bra	u347
  1675  000E66  F000               	nop	
  1676                           
  1677                           ;LibLCDXC8.h: 110: LATD1=0;
  1678  000E68  928C               	bcf	3980,1,c	;volatile
  1679  000E6A  0012               	return		;funcret
  1680  000E6C                     __end_of_HabilitaLCD:
  1681                           	callstack 0
  1682                           
  1683 ;; *************** function _Conversion *****************
  1684 ;; Defined at:
  1685 ;;		line 45 in file "PruebaADC.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;  canal           1    wreg     unsigned char 
  1688 ;; Auto vars:     Size  Location     Type
  1689 ;;  canal           1    3[COMRAM] unsigned char 
  1690 ;; Return value:  Size  Location     Type
  1691 ;;                  2    0[COMRAM] unsigned int 
  1692 ;; Registers used:
  1693 ;;		wreg, status,2, status,0
  1694 ;; Tracked objects:
  1695 ;;		On entry : 0/0
  1696 ;;		On exit  : 0/0
  1697 ;;		Unchanged: 0/0
  1698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1699 ;;      Params:         2       0       0       0       0       0       0       0       0
  1700 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1701 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1702 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1703 ;;Total ram usage:        4 bytes
  1704 ;; Hardware stack levels used: 1
  1705 ;; Hardware stack levels required when called: 1
  1706 ;; This function calls:
  1707 ;;		Nothing
  1708 ;; This function is called by:
  1709 ;;		_main
  1710 ;; This function uses a non-reentrant model
  1711 ;;
  1712                           
  1713                           	psect	text12
  1714  000D98                     __ptext12:
  1715                           	callstack 0
  1716  000D98                     _Conversion:
  1717                           	callstack 29
  1718                           
  1719                           ;incstack = 0
  1720                           ;Conversion@canal stored from wreg
  1721  000D98  6E04               	movwf	Conversion@canal^0,c
  1722                           
  1723                           ;PruebaADC.c: 46: ADCON0=(ADCON0 & 0b00000011) | (canal<<2);
  1724  000D9A  C004  F003         	movff	Conversion@canal,??_Conversion
  1725  000D9E  90D8               	bcf	status,0,c
  1726  000DA0  3603               	rlcf	??_Conversion^0,f,c
  1727  000DA2  90D8               	bcf	status,0,c
  1728  000DA4  3603               	rlcf	??_Conversion^0,f,c
  1729  000DA6  50C2               	movf	194,w,c	;volatile
  1730  000DA8  0B03               	andlw	3
  1731  000DAA  1003               	iorwf	??_Conversion^0,w,c
  1732  000DAC  6EC2               	movwf	194,c	;volatile
  1733                           
  1734                           ;PruebaADC.c: 47: GO=1;
  1735  000DAE  82C2               	bsf	4034,1,c	;volatile
  1736  000DB0                     l149:
  1737  000DB0  B2C2               	btfsc	4034,1,c	;volatile
  1738  000DB2  D7FE               	goto	l149
  1739                           
  1740                           ;PruebaADC.c: 49: return ADRES;
  1741  000DB4  CFC3 F001          	movff	4035,?_Conversion	;volatile
  1742  000DB8  CFC4 F002          	movff	4036,?_Conversion+1	;volatile
  1743  000DBC  0012               	return		;funcret
  1744  000DBE                     __end_of_Conversion:
  1745                           	callstack 0
  1746                           
  1747 ;; *************** function _ConfiguraLCD *****************
  1748 ;; Defined at:
  1749 ;;		line 55 in file "LibLCDXC8.h"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;  a               1    wreg     unsigned char 
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  a               1    0[COMRAM] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, status,0
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1763 ;;      Params:         0       0       0       0       0       0       0       0       0
  1764 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1766 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1767 ;;Total ram usage:        1 bytes
  1768 ;; Hardware stack levels used: 1
  1769 ;; Hardware stack levels required when called: 1
  1770 ;; This function calls:
  1771 ;;		Nothing
  1772 ;; This function is called by:
  1773 ;;		_main
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           	psect	text13
  1778  000E06                     __ptext13:
  1779                           	callstack 0
  1780  000E06                     _ConfiguraLCD:
  1781                           	callstack 29
  1782                           
  1783                           ;incstack = 0
  1784                           ;ConfiguraLCD@a stored from wreg
  1785  000E06  6E01               	movwf	ConfiguraLCD@a^0,c
  1786                           
  1787                           ;LibLCDXC8.h: 56: if(a==4 | a ==8)
  1788  000E08  0E04               	movlw	4
  1789  000E0A  1801               	xorwf	ConfiguraLCD@a^0,w,c
  1790  000E0C  B4D8               	btfsc	status,2,c
  1791  000E0E  D004               	goto	u100
  1792  000E10  0E08               	movlw	8
  1793  000E12  1801               	xorwf	ConfiguraLCD@a^0,w,c
  1794  000E14  A4D8               	btfss	status,2,c
  1795  000E16  0012               	return	
  1796  000E18                     u100:
  1797                           
  1798                           ;LibLCDXC8.h: 57: interfaz=a;
  1799  000E18  C001  F01E         	movff	ConfiguraLCD@a,_interfaz
  1800  000E1C  0012               	return		;funcret
  1801  000E1E                     __end_of_ConfiguraLCD:
  1802                           	callstack 0
  1803                           
  1804 ;; *************** function _ISR *****************
  1805 ;; Defined at:
  1806 ;;		line 51 in file "PruebaADC.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;		None
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg, status,2, status,0
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1820 ;;      Params:         0       0       0       0       0       0       0       0       0
  1821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1823 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1824 ;;Total ram usage:        0 bytes
  1825 ;; Hardware stack levels used: 1
  1826 ;; This function calls:
  1827 ;;		Nothing
  1828 ;; This function is called by:
  1829 ;;		Interrupt level 2
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	intcode
  1834  000008                     __pintcode:
  1835                           	callstack 0
  1836  000008                     _ISR:
  1837                           	callstack 26
  1838                           
  1839                           ;incstack = 0
  1840  000008  821F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1841  00000A  EDF1  F006         	call	int_func,f	;refresh shadow registers
  1842                           
  1843                           	psect	intcode_body
  1844  000DE2                     __pintcode_body:
  1845                           	callstack 26
  1846  000DE2                     int_func:
  1847                           	callstack 26
  1848  000DE2  0006               	pop		; remove dummy address from shadow register refresh
  1849                           
  1850                           ;PruebaADC.c: 52: if(TMR1IF==1){
  1851  000DE4  A09E               	btfss	3998,0,c	;volatile
  1852  000DE6  D00D               	goto	i2l158
  1853                           
  1854                           ;PruebaADC.c: 53: TMR1IF=0;
  1855  000DE8  909E               	bcf	3998,0,c	;volatile
  1856                           
  1857                           ;PruebaADC.c: 54: TMR1=60536;
  1858  000DEA  0EEC               	movlw	236
  1859  000DEC  6ECF               	movwf	207,c	;volatile
  1860  000DEE  0E78               	movlw	120
  1861  000DF0  6ECE               	movwf	206,c	;volatile
  1862                           
  1863                           ;PruebaADC.c: 56: CCPR1=60536+125+aux;
  1864  000DF2  0EF5               	movlw	245
  1865  000DF4  241C               	addwf	_aux^0,w,c
  1866  000DF6  6EBE               	movwf	190,c	;volatile
  1867  000DF8  0EEC               	movlw	236
  1868  000DFA  201D               	addwfc	(_aux+1)^0,w,c
  1869  000DFC  6EBF               	movwf	191,c	;volatile
  1870                           
  1871                           ;PruebaADC.c: 57: CCP1CON=0b00001001;
  1872  000DFE  0E09               	movlw	9
  1873  000E00  6EBD               	movwf	189,c	;volatile
  1874  000E02                     i2l158:
  1875  000E02  921F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1876  000E04  0011               	retfie		f
  1877  000E06                     __end_of_ISR:
  1878                           	callstack 0
  1879                           
  1880                           	psect	rparam
  1881  0000                     
  1882                           	psect	temp
  1883  00001F                     btemp:
  1884                           	callstack 0
  1885  00001F                     	ds	1
  1886  0000                     int$flags	set	btemp
  1887  0000                     wtemp8	set	btemp+1
  1888  0000                     ttemp5	set	btemp+1
  1889  0000                     ttemp6	set	btemp+4
  1890  0000                     ttemp7	set	btemp+8
  1891                           
  1892                           	psect	idloc
  1893                           
  1894                           ;Config register IDLOC0 @ 0x200000
  1895                           ;	unspecified, using default values
  1896  200000                     	org	2097152
  1897  200000  FF                 	db	255
  1898                           
  1899                           ;Config register IDLOC1 @ 0x200001
  1900                           ;	unspecified, using default values
  1901  200001                     	org	2097153
  1902  200001  FF                 	db	255
  1903                           
  1904                           ;Config register IDLOC2 @ 0x200002
  1905                           ;	unspecified, using default values
  1906  200002                     	org	2097154
  1907  200002  FF                 	db	255
  1908                           
  1909                           ;Config register IDLOC3 @ 0x200003
  1910                           ;	unspecified, using default values
  1911  200003                     	org	2097155
  1912  200003  FF                 	db	255
  1913                           
  1914                           ;Config register IDLOC4 @ 0x200004
  1915                           ;	unspecified, using default values
  1916  200004                     	org	2097156
  1917  200004  FF                 	db	255
  1918                           
  1919                           ;Config register IDLOC5 @ 0x200005
  1920                           ;	unspecified, using default values
  1921  200005                     	org	2097157
  1922  200005  FF                 	db	255
  1923                           
  1924                           ;Config register IDLOC6 @ 0x200006
  1925                           ;	unspecified, using default values
  1926  200006                     	org	2097158
  1927  200006  FF                 	db	255
  1928                           
  1929                           ;Config register IDLOC7 @ 0x200007
  1930                           ;	unspecified, using default values
  1931  200007                     	org	2097159
  1932  200007  FF                 	db	255
  1933                           
  1934                           	psect	config
  1935                           
  1936                           ;Config register CONFIG1L @ 0x300000
  1937                           ;	unspecified, using default values
  1938                           ;	PLL Prescaler Selection bits
  1939                           ;	PLLDIV = 0x0, unprogrammed default
  1940                           ;	System Clock Postscaler Selection bits
  1941                           ;	CPUDIV = 0x0, unprogrammed default
  1942                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1943                           ;	USBDIV = 0x0, unprogrammed default
  1944  300000                     	org	3145728
  1945  300000  00                 	db	0
  1946                           
  1947                           ;Config register CONFIG1H @ 0x300001
  1948                           ;	Oscillator Selection bits
  1949                           ;	FOSC = INTOSC_EC, Internal oscillator, CLKO function on RA6, EC used by USB (INTCKO)
  1950                           ;	Fail-Safe Clock Monitor Enable bit
  1951                           ;	FCMEN = 0x0, unprogrammed default
  1952                           ;	Internal/External Oscillator Switchover bit
  1953                           ;	IESO = 0x0, unprogrammed default
  1954  300001                     	org	3145729
  1955  300001  09                 	db	9
  1956                           
  1957                           ;Config register CONFIG2L @ 0x300002
  1958                           ;	unspecified, using default values
  1959                           ;	Power-up Timer Enable bit
  1960                           ;	PWRT = 0x1, unprogrammed default
  1961                           ;	Brown-out Reset Enable bits
  1962                           ;	BOR = 0x3, unprogrammed default
  1963                           ;	Brown-out Reset Voltage bits
  1964                           ;	BORV = 0x3, unprogrammed default
  1965                           ;	USB Voltage Regulator Enable bit
  1966                           ;	VREGEN = 0x0, unprogrammed default
  1967  300002                     	org	3145730
  1968  300002  1F                 	db	31
  1969                           
  1970                           ;Config register CONFIG2H @ 0x300003
  1971                           ;	Watchdog Timer Enable bit
  1972                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1973                           ;	Watchdog Timer Postscale Select bits
  1974                           ;	WDTPS = 0xF, unprogrammed default
  1975  300003                     	org	3145731
  1976  300003  1E                 	db	30
  1977                           
  1978                           ; Padding undefined space
  1979  300004                     	org	3145732
  1980  300004  FF                 	db	255
  1981                           
  1982                           ;Config register CONFIG3H @ 0x300005
  1983                           ;	unspecified, using default values
  1984                           ;	CCP2 MUX bit
  1985                           ;	CCP2MX = 0x1, unprogrammed default
  1986                           ;	PORTB A/D Enable bit
  1987                           ;	PBADEN = 0x1, unprogrammed default
  1988                           ;	Low-Power Timer 1 Oscillator Enable bit
  1989                           ;	LPT1OSC = 0x0, unprogrammed default
  1990                           ;	MCLR Pin Enable bit
  1991                           ;	MCLRE = 0x1, unprogrammed default
  1992  300005                     	org	3145733
  1993  300005  83                 	db	131
  1994                           
  1995                           ;Config register CONFIG4L @ 0x300006
  1996                           ;	unspecified, using default values
  1997                           ;	Stack Full/Underflow Reset Enable bit
  1998                           ;	STVREN = 0x1, unprogrammed default
  1999                           ;	Single-Supply ICSP Enable bit
  2000                           ;	LVP = 0x1, unprogrammed default
  2001                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  2002                           ;	ICPRT = 0x0, unprogrammed default
  2003                           ;	Extended Instruction Set Enable bit
  2004                           ;	XINST = 0x0, unprogrammed default
  2005                           ;	Background Debugger Enable bit
  2006                           ;	DEBUG = 0x1, unprogrammed default
  2007  300006                     	org	3145734
  2008  300006  85                 	db	133
  2009                           
  2010                           ; Padding undefined space
  2011  300007                     	org	3145735
  2012  300007  FF                 	db	255
  2013                           
  2014                           ;Config register CONFIG5L @ 0x300008
  2015                           ;	unspecified, using default values
  2016                           ;	Code Protection bit
  2017                           ;	CP0 = 0x1, unprogrammed default
  2018                           ;	Code Protection bit
  2019                           ;	CP1 = 0x1, unprogrammed default
  2020                           ;	Code Protection bit
  2021                           ;	CP2 = 0x1, unprogrammed default
  2022                           ;	Code Protection bit
  2023                           ;	CP3 = 0x1, unprogrammed default
  2024  300008                     	org	3145736
  2025  300008  0F                 	db	15
  2026                           
  2027                           ;Config register CONFIG5H @ 0x300009
  2028                           ;	unspecified, using default values
  2029                           ;	Boot Block Code Protection bit
  2030                           ;	CPB = 0x1, unprogrammed default
  2031                           ;	Data EEPROM Code Protection bit
  2032                           ;	CPD = 0x1, unprogrammed default
  2033  300009                     	org	3145737
  2034  300009  C0                 	db	192
  2035                           
  2036                           ;Config register CONFIG6L @ 0x30000A
  2037                           ;	unspecified, using default values
  2038                           ;	Write Protection bit
  2039                           ;	WRT0 = 0x1, unprogrammed default
  2040                           ;	Write Protection bit
  2041                           ;	WRT1 = 0x1, unprogrammed default
  2042                           ;	Write Protection bit
  2043                           ;	WRT2 = 0x1, unprogrammed default
  2044                           ;	Write Protection bit
  2045                           ;	WRT3 = 0x1, unprogrammed default
  2046  30000A                     	org	3145738
  2047  30000A  0F                 	db	15
  2048                           
  2049                           ;Config register CONFIG6H @ 0x30000B
  2050                           ;	unspecified, using default values
  2051                           ;	Configuration Register Write Protection bit
  2052                           ;	WRTC = 0x1, unprogrammed default
  2053                           ;	Boot Block Write Protection bit
  2054                           ;	WRTB = 0x1, unprogrammed default
  2055                           ;	Data EEPROM Write Protection bit
  2056                           ;	WRTD = 0x1, unprogrammed default
  2057  30000B                     	org	3145739
  2058  30000B  E0                 	db	224
  2059                           
  2060                           ;Config register CONFIG7L @ 0x30000C
  2061                           ;	unspecified, using default values
  2062                           ;	Table Read Protection bit
  2063                           ;	EBTR0 = 0x1, unprogrammed default
  2064                           ;	Table Read Protection bit
  2065                           ;	EBTR1 = 0x1, unprogrammed default
  2066                           ;	Table Read Protection bit
  2067                           ;	EBTR2 = 0x1, unprogrammed default
  2068                           ;	Table Read Protection bit
  2069                           ;	EBTR3 = 0x1, unprogrammed default
  2070  30000C                     	org	3145740
  2071  30000C  0F                 	db	15
  2072                           
  2073                           ;Config register CONFIG7H @ 0x30000D
  2074                           ;	unspecified, using default values
  2075                           ;	Boot Block Table Read Protection bit
  2076                           ;	EBTRB = 0x1, unprogrammed default
  2077  30000D                     	org	3145741
  2078  30000D  40                 	db	64
  2079                           tosu	equ	0xFFF
  2080                           tosh	equ	0xFFE
  2081                           tosl	equ	0xFFD
  2082                           stkptr	equ	0xFFC
  2083                           pclatu	equ	0xFFB
  2084                           pclath	equ	0xFFA
  2085                           pcl	equ	0xFF9
  2086                           tblptru	equ	0xFF8
  2087                           tblptrh	equ	0xFF7
  2088                           tblptrl	equ	0xFF6
  2089                           tablat	equ	0xFF5
  2090                           prodh	equ	0xFF4
  2091                           prodl	equ	0xFF3
  2092                           indf0	equ	0xFEF
  2093                           postinc0	equ	0xFEE
  2094                           postdec0	equ	0xFED
  2095                           preinc0	equ	0xFEC
  2096                           plusw0	equ	0xFEB
  2097                           fsr0h	equ	0xFEA
  2098                           fsr0l	equ	0xFE9
  2099                           wreg	equ	0xFE8
  2100                           indf1	equ	0xFE7
  2101                           postinc1	equ	0xFE6
  2102                           postdec1	equ	0xFE5
  2103                           preinc1	equ	0xFE4
  2104                           plusw1	equ	0xFE3
  2105                           fsr1h	equ	0xFE2
  2106                           fsr1l	equ	0xFE1
  2107                           bsr	equ	0xFE0
  2108                           indf2	equ	0xFDF
  2109                           postinc2	equ	0xFDE
  2110                           postdec2	equ	0xFDD
  2111                           preinc2	equ	0xFDC
  2112                           plusw2	equ	0xFDB
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8

Data Sizes:
    Strings     22
    Constant    0
    Data        1
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     27      30
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    MensajeLCD_Var@a	PTR unsigned char  size(1) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 


Critical Paths under _main in COMRAM

    _main->_EscribeLCD_n16
    _MensajeLCD_Var->_EscribeLCD_c
    _InicializaLCD->_EnviaDato
    _BorraLCD->_EnviaDato
    _EscribeLCD_n16->___lwdiv
    ___lwdiv->___lwmod
    _EscribeLCD_c->_EnviaDato
    _DireccionaLCD->_EnviaDato
    _EnviaDato->_RetardoLCD

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    5752
                                             21 COMRAM     6     6      0
                           _BorraLCD
                       _ConfiguraLCD
                         _Conversion
                      _DireccionaLCD
                     _EscribeLCD_n16
                      _InicializaLCD
                     _MensajeLCD_Var
 ---------------------------------------------------------------------------------
 (1) _MensajeLCD_Var                                       1     0      1     287
                                              5 COMRAM     1     0      1
                       _EscribeLCD_c
 ---------------------------------------------------------------------------------
 (1) _InicializaLCD                                        0     0      0     150
                           _BorraLCD
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (2) _BorraLCD                                             0     0      0      75
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _EscribeLCD_n16                                       9     6      3    5037
                                             12 COMRAM     9     6      3
                       _EscribeLCD_c
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    2287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1682
                                              5 COMRAM     7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _EscribeLCD_c                                         1     1      0      90
                                              4 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (1) _DireccionaLCD                                        1     1      0      90
                                              4 COMRAM     1     1      0
                          _EnviaDato
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (3) _EnviaDato                                            2     2      0      60
                                              2 COMRAM     2     2      0
                        _HabilitaLCD
                         _RetardoLCD
 ---------------------------------------------------------------------------------
 (3) _RetardoLCD                                           2     2      0      15
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _HabilitaLCD                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Conversion                                           4     2      2      22
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _ConfiguraLCD                                         1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BorraLCD
     _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     _HabilitaLCD
     _RetardoLCD
   _ConfiguraLCD
   _Conversion
   _DireccionaLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _EscribeLCD_n16
     _EscribeLCD_c
       _EnviaDato
       _HabilitaLCD
       _RetardoLCD
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _InicializaLCD
     _BorraLCD
     _EnviaDato
     _HabilitaLCD
     _RetardoLCD
   _MensajeLCD_Var
     _EscribeLCD_c

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1B      1E       1       31.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      20        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Dec 14 15:12:32 2021

                     _GO 007E11               EnviaDato@a 0004            _InicializaLCD 0BA4  
                    l149 0DB0                      l640 0CDE                      l650 0D66  
                    l920 0C70                      l914 0C44                      l916 0C54  
                    l924 0C7A                      l918 0C66                      l936 0D20  
                    u100 0E18                      u220 0D48                      u307 0C56  
                    u317 0C5E                      u190 0CB8                      u327 0C68  
                    u337 0C72                      u347 0E62                      u267 0B0A  
                    _ISR 0008                      u277 0B40                      u287 0B98  
                    u297 0C4A                      _aux 001C                      wreg 000FE8  
                   ?_ISR 0001                     l1004 0BB6                     l1014 0BD4  
                   l1024 0BF2                     l1210 0B4C                     l1044 0C2A  
                   l1134 0CAC                     l1136 0CB4                     l1146 0CD4  
                   l1162 0D5C                     l1154 0D3C                     l1170 083E  
                   l1156 0D44                     l1172 0894                     l1180 0ACA  
                   l1174 0922                     l1176 09E8                     l1168 081C  
                   l1184 0D72                     l1188 0D84                     STR_1 080C  
                   STR_2 0801                     _LATD 000F8C                     _TMR1 000FCE  
         ??_EscribeLCD_c 0005                     _main 0AEC                     btemp 001F  
                   start 000E             ___param_bank 000000                    ??_ISR 0001  
         ?_InicializaLCD 0001                    ?_main 0001                    _ADRES 000FC3  
                  _CCPR1 000FBE            EscribeLCD_c@a 0005                    _LATD0 007C60  
                  _LATD1 007C61          __end_of___lwdiv 0CE8          __end_of___lwmod 0D70  
                  i2l158 0E02                    _TRISD 000F95     EscribeLCD_n16@decena 0014  
__size_of_MensajeLCD_Var 0028                    tablat 000FF5               _Conversion 0D98  
            _HabilitaLCD 0E5E     EscribeLCD_n16@millar 0010                    ttemp5 0020  
                  ttemp6 0023                    ttemp7 0027                    status 000FD8  
                  wtemp8 0020     EscribeLCD_n16@unidad 0015         __end_of_BorraLCD 0E5E  
        __initialization 0DBE             __end_of_main 0BA4                   ??_main 0016  
   __end_of_ConfiguraLCD 0E1E            __activetblptr 000002                   _ADCON0 000FC2  
                 _ADCON1 000FC1                   _ADCON2 000FC0           DireccionaLCD@a 0005  
     __size_of_EnviaDato 0046                   _TMR1IF 007CF0    __end_of_DireccionaLCD 0E4A  
             _RetardoLCD 0C40         ??_EscribeLCD_n16 0010                ??___lwdiv 000A  
              ??___lwmod 0005          ??_InicializaLCD 0005                   isa$std 000001  
   __end_of_EscribeLCD_c 0E34    EscribeLCD_n16@centena 0012             __pdataCOMRAM 001E  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8              ?_Conversion 0001               __accesstop 0060  
__end_of__initialization 0DD4            ___rparam_used 000001           __pcstackCOMRAM 0001  
      __end_of_EnviaDato 0D2E                ?_BorraLCD 0001           _MensajeLCD_Var 0D70  
        MensajeLCD_Var@a 0006              ?_RetardoLCD 0001              RetardoLCD@a 0002  
  __size_of_ConfiguraLCD 0018                  _CCP1CON 000FBD          EscribeLCD_n16@a 000D  
        EscribeLCD_n16@b 000F      __size_of_Conversion 0026   __end_of_MensajeLCD_Var 0D98  
             ??_BorraLCD 0005             ?_HabilitaLCD 0001             _ConfiguraLCD 0E06  
                __Hparam 0000                  __Lparam 0000    __size_of_EscribeLCD_c 0016  
                ___lwdiv 0C96                  ___lwmod 0D2E             __psmallconst 0800  
                __pcinit 0DBE                  __ramtop 0800                  __ptext0 0AEC  
                __ptext1 0D70                  __ptext2 0BA4                  __ptext3 0E4A  
                __ptext4 0818                  __ptext5 0D2E                  __ptext6 0C96  
                __ptext7 0E1E                  __ptext8 0E34                  __ptext9 0CE8  
           __size_of_ISR 0DFE      __size_of_RetardoLCD 0056          ?_MensajeLCD_Var 0006  
         __pintcode_body 0DE2     end_of_initialization 0DD4          Conversion@canal 0004  
         main@resultado1 0018           main@resultado2 001A            __Lmediumconst 0000  
                int_func 0DE2             _EscribeLCD_c 0E1E             ??_Conversion 0003  
          __pidataCOMRAM 0E6C    __end_of_InicializaLCD 0C40       __end_of_Conversion 0DBE  
              _EnviaDato 0CE8   __size_of_DireccionaLCD 0016      start_initialization 0DBE  
            __end_of_ISR 0E06        __size_of_BorraLCD 0014             ??_RetardoLCD 0001  
   __size_of_HabilitaLCD 000E  __size_of_EscribeLCD_n16 02D4               ?_EnviaDato 0001  
            __pbssCOMRAM 001C       __end_of_RetardoLCD 0C96            _DireccionaLCD 0E34  
       ___lwdiv@dividend 0006                __pintcode 0008                 ?___lwdiv 0006  
               ?___lwmod 0001         ??_MensajeLCD_Var 0007              __smallconst 0800  
       ___lwdiv@quotient 000A           ?_DireccionaLCD 0001              ??_EnviaDato 0003  
               _BorraLCD 0E4A                 __Hrparam 0000                 __Lrparam 0000  
       __size_of___lwdiv 0052         __size_of___lwmod 0042           _EscribeLCD_n16 0818  
          ConfiguraLCD@a 0001          ___lwdiv@divisor 0008          ___lwdiv@counter 000C  
               __ptext10 0C40                 __ptext11 0E5E                 __ptext12 0D98  
               __ptext13 0E06          ??_DireccionaLCD 0005            __size_of_main 00B8  
               _interfaz 001E                 isa$xinst 000000                 int$flags 001F  
 __end_of_EscribeLCD_n16 0AEC                 intlevel2 0000            ??_HabilitaLCD 0001  
       ___lwmod@dividend 0001            ?_ConfiguraLCD 0001   __size_of_InicializaLCD 009C  
        ?_EscribeLCD_n16 000D          ___lwmod@divisor 0003          ___lwmod@counter 0005  
         ??_ConfiguraLCD 0001            ?_EscribeLCD_c 0001      __end_of_HabilitaLCD 0E6C  
